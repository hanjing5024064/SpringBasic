<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- 如果要进行Redis处理用户应该不去关注具体的序列化或反序列化操作，这一切都应该交给SpringData处理 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />		<!-- 定义Redis连接工厂 -->
		<property name="keySerializer">	<!-- 定义序列化Key的程序处理类 -->
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">	<!-- 处理value数据的操作 -->
			<!-- 明确表示如果要进行value数据保存的时候，保存的对象一定要使用JDK提供的序列化处理类 -->
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">	<!-- 处理hash数据的保存 -->
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
	
	<!-- 进行所有的哨兵地址的配置项 -->
	<bean id="sentinelsConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<property name="master">				<!-- 配置master的节点名称 -->
			<bean class="org.springframework.data.redis.connection.RedisNode">
				<!-- 通过资源文件读取出master的名称进行配置 -->
				<property name="name" value="${redis.sentinel.master.name}"/>
			</bean>
		</property>
		<property name="sentinels">				<!-- 配置所有哨兵的连接地址信息 -->
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.sentinel-1.host}"/>
					<constructor-arg name="port" value="${redis.sentinel-1.port}"/>
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.sentinel-2.host}"/>
					<constructor-arg name="port" value="${redis.sentinel-2.port}"/>
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.sentinel-3.host}"/>
					<constructor-arg name="port" value="${redis.sentinel-3.port}"/>
				</bean>
			</set>
		</property>
	</bean>
	
	
	<!-- 首先进行Jedis连接池的相关配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />	<!-- 最大可用连接数 -->
		<property name="maxIdle" value="${redis.pool.maxIdle}" />	<!-- 最小维持连接数 -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />	<!-- 最大等待时间 -->
	</bean> 
	<!-- 进行ConnectionFactory的配置 -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<constructor-arg name="sentinelConfig" ref="sentinelsConfiguration"/>
		<property name="poolConfig" ref="jedisPoolConfig"/>		<!-- 引用连接池配置项 -->
		<property name="password" value="${redis.password}"/>	<!-- 认证密码 -->
	</bean>
</beans>
