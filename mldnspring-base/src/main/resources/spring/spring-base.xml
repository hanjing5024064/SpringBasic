<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<context:component-scan base-package="cn.mldn.mldnspring" />	<!-- 此包下的所有注解自动生效 -->
	<bean id="serviceAdvice" class="cn.mldn.mldnspring.advice.ServiceAdvice"/>	<!-- 通知处理类 -->
	<aop:config>				<!-- 进行AOP的配置处理 -->
		<!-- 配置切入点AspectJ表达式，这个表达式直接决定了最终到底在那里去执行代理操作 -->
		<aop:pointcut id="myPointcut" expression="execution(public * cn.mldn..service..*.*(..))" />
		<aop:aspect ref="serviceAdvice">		<!-- 切入处理操作方法定义，设置程序类名称 -->
			<aop:before method="handleBefore" 
				pointcut="execution(public * cn.mldn..service..*.*(..)) and args(msg)" 
				arg-names="msg"/>				<!-- 定义新的切入点 -->
			<aop:after method="handleAfter" pointcut-ref="myPointcut"/>		<!-- 引入切入点 -->
			<!-- 定义后置返回通知，需要将方法的返回数据传递到方法之中 -->
			<aop:after-returning method="handleReturn" pointcut-ref="myPointcut" returning="val" arg-names="val"/>
			<!-- 定义后置异常通知，需要将产生的异常对象传递到方法之中 -->
			<aop:after-throwing method="handleThrow" pointcut-ref="myPointcut" throwing="e" arg-names="e"/>
		</aop:aspect>
	</aop:config>
</beans>
